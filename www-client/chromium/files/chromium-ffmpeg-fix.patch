--- ./media/filters/ffmpeg_audio_decoder.cc~	2017-11-01 23:34:40.000000000 +0000
+++ ./media/filters/ffmpeg_audio_decoder.cc	2017-11-07 21:37:39.425701687 +0000
@@ -368,7 +368,7 @@
 int FFmpegAudioDecoder::GetAudioBuffer(struct AVCodecContext* s,
                                        AVFrame* frame,
                                        int flags) {
-  DCHECK(s->codec->capabilities & CODEC_CAP_DR1);
+  DCHECK(s->codec->capabilities & AV_CODEC_CAP_DR1);
   DCHECK_EQ(s->codec_type, AVMEDIA_TYPE_AUDIO);
 
   // Since this routine is called by FFmpeg when a buffer is required for audio
--- ./media/cdm/ppapi/external_clear_key/ffmpeg_cdm_video_decoder.cc~	2017-11-01 23:34:40.000000000 +0000
+++ ./media/cdm/ppapi/external_clear_key/ffmpeg_cdm_video_decoder.cc	2017-11-07 22:39:58.663527982 +0000
@@ -164,7 +164,6 @@
   codec_context_->err_recognition = AV_EF_CAREFUL;
   codec_context_->thread_count = kDecodeThreads;
   codec_context_->opaque = this;
-  codec_context_->flags |= CODEC_FLAG_EMU_EDGE;
 
   AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec) {
--- ./media/filters/ffmpeg_video_decoder.cc~	2017-11-01 23:34:40.000000000 +0000
+++ ./media/filters/ffmpeg_video_decoder.cc	2017-11-07 22:39:56.426826726 +0000
@@ -427,7 +427,6 @@
   codec_context_->thread_type =
       FF_THREAD_SLICE | (low_delay ? 0 : FF_THREAD_FRAME);
   codec_context_->opaque = this;
-  codec_context_->flags |= CODEC_FLAG_EMU_EDGE;
   codec_context_->get_buffer2 = GetVideoBufferImpl;
   codec_context_->refcounted_frames = 1;
 
@@ -432,7 +431,7 @@
   codec_context_->refcounted_frames = 1;
 
   if (decode_nalus_)
-    codec_context_->flags2 |= CODEC_FLAG2_CHUNKS;
+    codec_context_->flags2 |= AV_CODEC_FLAG2_CHUNKS;
 
   AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec || avcodec_open2(codec_context_.get(), codec, NULL) < 0) {
--- ./media/ffmpeg/ffmpeg_common.cc~	2017-11-01 23:34:40.000000000 +0000
+++ ./media/ffmpeg/ffmpeg_common.cc	2017-11-08 07:38:29.753210191 +0000
@@ -30,10 +30,10 @@
 
 }  // namespace
 
-// Why FF_INPUT_BUFFER_PADDING_SIZE? FFmpeg assumes all input buffers are
+// Why AV_INPUT_BUFFER_PADDING_SIZE? FFmpeg assumes all input buffers are
 // padded. Check here to ensure FFmpeg only receives data padded to its
 // specifications.
-static_assert(DecoderBuffer::kPaddingSize >= FF_INPUT_BUFFER_PADDING_SIZE,
+static_assert(DecoderBuffer::kPaddingSize >= AV_INPUT_BUFFER_PADDING_SIZE,
               "DecoderBuffer padding size does not fit ffmpeg requirement");
 
 // Alignment requirement by FFmpeg for input and output buffers. This need to
@@ -433,11 +433,11 @@
   } else {
     codec_context->extradata_size = config.extra_data().size();
     codec_context->extradata = reinterpret_cast<uint8_t*>(
-        av_malloc(config.extra_data().size() + FF_INPUT_BUFFER_PADDING_SIZE));
+        av_malloc(config.extra_data().size() + AV_INPUT_BUFFER_PADDING_SIZE));
     memcpy(codec_context->extradata, &config.extra_data()[0],
            config.extra_data().size());
     memset(codec_context->extradata + config.extra_data().size(), '\0',
-           FF_INPUT_BUFFER_PADDING_SIZE);
+           AV_INPUT_BUFFER_PADDING_SIZE);
   }
 }
 
@@ -600,11 +600,11 @@
   } else {
     codec_context->extradata_size = config.extra_data().size();
     codec_context->extradata = reinterpret_cast<uint8_t*>(
-        av_malloc(config.extra_data().size() + FF_INPUT_BUFFER_PADDING_SIZE));
+        av_malloc(config.extra_data().size() + AV_INPUT_BUFFER_PADDING_SIZE));
     memcpy(codec_context->extradata, &config.extra_data()[0],
            config.extra_data().size());
     memset(codec_context->extradata + config.extra_data().size(), '\0',
-           FF_INPUT_BUFFER_PADDING_SIZE);
+           AV_INPUT_BUFFER_PADDING_SIZE);
   }
 }
 
--- ./media/cdm/ppapi/external_clear_key/ffmpeg_cdm_audio_decoder.cc~	2017-11-01 23:34:40.000000000 +0000
+++ ./media/cdm/ppapi/external_clear_key/ffmpeg_cdm_audio_decoder.cc	2017-11-08 07:38:29.336537080 +0000
@@ -71,11 +71,11 @@
   if (config.extra_data) {
     codec_context->extradata_size = config.extra_data_size;
     codec_context->extradata = reinterpret_cast<uint8_t*>(
-        av_malloc(config.extra_data_size + FF_INPUT_BUFFER_PADDING_SIZE));
+        av_malloc(config.extra_data_size + AV_INPUT_BUFFER_PADDING_SIZE));
     memcpy(codec_context->extradata, config.extra_data,
            config.extra_data_size);
     memset(codec_context->extradata + config.extra_data_size, '\0',
-           FF_INPUT_BUFFER_PADDING_SIZE);
+           AV_INPUT_BUFFER_PADDING_SIZE);
   } else {
     codec_context->extradata = NULL;
     codec_context->extradata_size = 0;
